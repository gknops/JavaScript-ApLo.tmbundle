<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>saveActiveFile</string>
	<key>command</key>
	<string>#!/usr/bin/env bash
[[ -f "${TM_SUPPORT_PATH}/lib/bash_init.sh" ]] &amp;&amp; . "${TM_SUPPORT_PATH}/lib/bash_init.sh"

#
# JSLint option set:
# 
#		anon       true, if the space may be omitted in anonymous function declarations
#		bitwise    true, if bitwise operators should be allowed
#		browser    true, if the standard browser globals should be predefined
#		cap        true, if upper case HTML should be allowed
#		'continue' true, if the continuation statement should be tolerated
#		css        true, if CSS workarounds should be tolerated
#		debug      true, if debugger statements should be allowed
#		devel      true, if logging should be allowed (console, alert, etc.)
#		eqeq       true, if == should be allowed
#		es5        true, if ES5 syntax should be allowed
#		evil       true, if eval should be allowed
#		forin      true, if for in statements need not filter
#		fragment   true, if HTML fragments should be allowed
#		indent     the indentation factor
#		maxerr     the maximum number of errors to allow
#		maxlen     the maximum length of a source line
#		newcap     true, if constructor names capitalization is ignored
#		node       true, if Node.js globals should be predefined
#		nomen      true, if names may have dangling _
#		on         true, if HTML event handlers should be allowed
#		passfail   true, if the scan should stop on first error
#		plusplus   true, if increment/decrement should be allowed
#		properties true, if all property names must be declared with /*properties*/
#		regexp     true, if the . should be allowed in regexp literals
#		rhino      true, if the Rhino environment globals should be predefined
#		undef      true, if variables can be declared out of order
#		unparam    true, if unused parameters should be tolerated
#		sloppy     true, if the 'use strict'; pragma is optional
#		stupid     true, if really stupid practices are tolerated
#		sub        true, if all forms of subscript notation are tolerated
#		vars       true, if multiple var statements per function should be allowed
#		white      true, if sloppy whitespace is tolerated
#		widget     true  if the Yahoo Widgets globals should be predefined
#		windows    true, if MS Windows-specific globals should be predefined
# 
# 
# 	"good parts" options are:
# 
#		devel: true,
#		browser: true,
#		white: true,
#		onevar: true,
#		undef: true,
#		newcap: true,
#		nomen: true,
#		regexp: true,
#		plusplus: true,
#		bitwise: true,
#		maxerr: 50,
#		indent: 4
#	
APLO_JSLINT_DEFAULT_OPTIONS="devel: true, browser: true, white: true, onevar: true, undef: true, newcap: true, nomen: true, regexp: true, plusplus: true, bitwise: true, maxerr: 50, indent: 4"

APLO_JSLINT_OPTIONS=${APLO_JSLINT_OPTIONS:-"$APLO_JSLINT_DEFAULT_OPTIONS"}

APLO_JSLINT=$TM_BUNDLE_SUPPORT/JSLint/jslint.js
APLO_JSC_WRAPPER=$TM_BUNDLE_SUPPORT/lib/jsc_jslint_wrapper.js
APLO_JSC=/System/Library/Frameworks/JavaScriptCore.framework/Versions/A/Resources/jsc

APLO_WINDOW_NAME="JavaScript Syntax Check"
APLO_PARSER_PATH=$TM_BUNDLE_SUPPORT/bin/javaScriptSyntaxCheck
APLO_DELETE_FILE=1

PATH=/usr/local/bin:$PATH

export APLO_JSLINT_OPTIONS APLO_JSLINT APLO_JSC_WRAPPER APLO_JSC APLO_WINDOW_NAME APLO_PARSER_PATH APLO_DELETE_FILE

aploPath=/tmp/aplo-javascriptSyntaxCheck-$$.aplo

env&gt;$aploPath
open -g $aploPath
</string>
	<key>input</key>
	<string>none</string>
	<key>inputFormat</key>
	<string>text</string>
	<key>name</key>
	<string>SyntaxCheck</string>
	<key>outputCaret</key>
	<string>afterOutput</string>
	<key>outputFormat</key>
	<string>text</string>
	<key>outputLocation</key>
	<string>toolTip</string>
	<key>scope</key>
	<string>source.js</string>
	<key>semanticClass</key>
	<string>callback.document.did-save</string>
	<key>uuid</key>
	<string>8C60C84F-CB22-419E-8797-8E5E01D887D7</string>
	<key>version</key>
	<integer>2</integer>
</dict>
</plist>
